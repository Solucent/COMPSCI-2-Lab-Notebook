#include "pch.h"
#include <iostream>
#include <fstream>
#include <string>
#include <vector>

using namespace std;

vector<char> DRM(string m) {

	int len = m.length() / 2;
	int total1 = 0, total2 = 0;
	vector<char> m1, m2;

	//converts first half of message to char array, and finds their Alphabetic Values
	for (int i = 0; i < len; i++) {
		m1.push_back(m[i]);
		int num = m1.at(i) - 65;
		total1 = total1 + num;
	}
	//converts second half of message to char array, and finds their Alphabetic Values
	for (int i = 0; i < len; i++) {
		m2.push_back(m[i + len]);
		int num = m2.at(i) - 65;
		total2 = total2 + num;
	}
	//Since any rotation value above 26 would just result in the same letter, only the remainder is needed
	total1 = total1 % 26;
	total2 = total2 % 26;

	//Rotates the values of each half
	for (int i = 0; i < len; i++) {

		m1.at(i) = m1.at(i) + total1;
		m2.at(i) = m2.at(i) + total2;

		if (m1.at(i) > 90) {
			m1.at(i) = m1.at(i) - 26;
		}
		else if (m2.at(i) > 90) {
			m2.at(i) = m2.at(i) - 26;
		}
	}
	//Rotates the first half by the second half
	for (int i = 0; i < len; i++) {
		m1.at(i) = m1.at(i) + (m2.at(i) - 65);
		if (m1.at(i) > 90) {
			m1.at(i) = m1.at(i) - 26;
		}
	}
	return m1;
}

int main()
{
	string message;
	ifstream input;
	ofstream output;
	vector<char> encodedDRM;

	input.open("DRM.txt");
	output.open("DecodedDRM.txt");

	while (getline(input, message)) {

		//Checks to see if input is correct
		if (message.length() > 15000) {
			cout << "The encoded message is too large.";
			return 0;
		}
		else if ((message.length() % 2) != 0) {
			cout << "The message does not contain an even amount of characters.";
			return 0;
		}

		encodedDRM = DRM(message);

		//Outputs the encoded message to a text file
		
		for (int i = 0; i < encodedDRM.size(); i++) {
			output << encodedDRM.at(i);
		}
		output << endl;
	}
	return 0;
}
